#!/usr/bin/env python
__author__ = "Miguel Costa"
__email__ = "mncosta(at)isr(dot)tecnico(dot)ulisboa(dot)pt"

import numpy as np

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#                               General
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
SKIP_N_FRAMES = 5


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#                               Objects
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
OBJECT_MINIMUM_SCORE = 0.6


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#                               Optical Flow
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
CLAHE_clipLimit = 2.0
CLAHE_tileGridSize = (10, 10)
OF_FEATURE_PARAMS = dict(maxCorners = 50, qualityLevel = 0.1, minDistance = 7, blockSize = 7 )
OF_MINIMUM_DIST=5
OF_DISTANCES_USE_GLOBAL=False
OF_CALC_INTERVALS = 4

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#                               Focus of Expansion
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
CVX_SUPRESS_PRINT = True
HUBER_LOSS_EPSILON = 1.
RANSAC_MINIMUM_DATAPOINTS = 2
RANSAC_NUMBER_ITERATIONS = 50
RANSAC_MINIMUM_ERROR_DISTANCE = 100
RANSAC_MINIMUM_RATIO_INLIERS = 0.60
RANSAC_MINIMUM_ERROR_ANGLE = 15
RANSAC_RATIO_INCREASE_ETA = 0.0001
ITERATIVE_OBJECT_WEIGHTS_ITERATIONS = 5
MAXIMUM_INLIERS_ANGLE = 15
EXPONENTIAL_DECAY_NBR_WEIGHTS = 20
EXPONENTIAL_DECAY_INITIAL = 1.0
EXPONENTIAL_DECAY_TAU = 0.1


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#                               Risk Classifier
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
DISTANCE_MATRIX_PATH_OCCUPATION = np.array([
        [0, 1, 2, 3, 4, 2, 4, 6, 8, 10, 2, 4, 6, 8, 10, 8, 12, 16, 20, 24, 8, 12, 16, 20, 24],  # 0
        [1, 0, 1, 2, 3, 4, 2, 4, 6, 8, 4, 2, 4, 6, 8, 12, 8, 12, 16, 20, 12, 8, 12, 16, 20],  # 1
        [2, 1, 0, 1, 2, 6, 4, 2, 4, 6, 6, 4, 2, 4, 6, 16, 12, 8, 12, 16, 16, 12, 8, 12, 16],  # 2
        [3, 2, 1, 0, 1, 8, 6, 4, 2, 4, 8, 6, 4, 2, 4, 20, 16, 12, 8, 12, 20, 16, 12, 8, 12],  # 3
        [4, 3, 2, 1, 0, 10, 8, 6, 4, 2, 10, 8, 6, 4, 2, 24, 20, 16, 12, 8, 24, 20, 16, 12, 8],  # 4
        [2, 4, 6, 8, 10, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 4, 6, 8, 10, 2, 4, 6, 8, 10],  # 5
        [4, 2, 4, 6, 8, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 4, 2, 4, 6, 8, 4, 2, 4, 6, 8],  # 6
        [6, 4, 2, 4, 6, 2, 1, 0, 1, 2, 2, 1, 0, 1, 2, 6, 4, 2, 4, 6, 6, 4, 2, 4, 6],  # 7
        [8, 6, 4, 2, 4, 3, 2, 1, 0, 1, 3, 2, 1, 0, 1, 8, 6, 4, 2, 4, 8, 6, 4, 2, 4],  # 8
        [10, 8, 6, 4, 2, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 10, 8, 6, 4, 2, 10, 8, 6, 4, 2],  # 9
        [2, 4, 6, 8, 10, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 2, 4, 6, 8, 10, 2, 4, 6, 8, 10],  # 10
        [4, 2, 4, 6, 8, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3, 4, 2, 4, 6, 8, 4, 2, 4, 6, 8],  # 11
        [6, 4, 2, 4, 6, 2, 1, 0, 1, 2, 2, 1, 0, 1, 2, 6, 4, 2, 4, 6, 6, 4, 2, 4, 6],  # 12
        [8, 6, 4, 2, 4, 3, 2, 1, 0, 1, 3, 2, 1, 0, 1, 8, 6, 4, 2, 4, 8, 6, 4, 2, 4],  # 13
        [10, 8, 6, 4, 2, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 10, 8, 6, 4, 2, 10, 8, 6, 4, 2],  # 14
        [8, 12, 16, 20, 24, 2, 4, 6, 8, 0, 2, 4, 6, 8, 10, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4],  # 15
        [12, 8, 12, 16, 20, 4, 2, 4, 6, 8, 4, 2, 4, 6, 8, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3],  # 16
        [16, 12, 8, 12, 16, 6, 4, 2, 4, 6, 6, 4, 2, 4, 6, 2, 1, 0, 1, 2, 2, 1, 0, 1, 2],  # 17
        [20, 16, 12, 8, 12, 8, 6, 4, 2, 4, 8, 6, 4, 2, 4, 3, 2, 1, 0, 1, 3, 2, 1, 0, 1],  # 18
        [24, 20, 16, 12, 8, 10, 8, 6, 4, 2, 10, 8, 6, 4, 2, 4, 3, 2, 1, 0, 4, 3, 2, 2, 0],  # 19
        [8, 12, 16, 20, 24, 2, 4, 6, 8, 10, 2, 4, 6, 8, 10, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4],  # 20
        [12, 8, 12, 16, 20, 4, 2, 4, 6, 8, 4, 2, 4, 6, 8, 1, 0, 1, 2, 3, 1, 0, 1, 2, 3],  # 21
        [16, 12, 8, 12, 16, 6, 4, 2, 4, 6, 6, 4, 2, 4, 6, 2, 1, 0, 1, 2, 2, 1, 0, 1, 2],  # 22
        [20, 16, 12, 8, 12, 8, 6, 4, 2, 4, 8, 6, 4, 2, 4, 3, 2, 1, 0, 1, 3, 2, 1, 0, 1],  # 23
        [24, 20, 16, 12, 8, 10, 8, 6, 4, 2, 10, 8, 6, 4, 2, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0]]).astype(np.float)  # 24
DISTANCE_MATRIX_DISTANCE = np.array([
        [0, 2, 4, 6, 8, 1, 4, 6, 16, 20, 1, 4, 6, 16, 20, 2, 3, 4, 10, 12, 2, 3, 4, 10, 12],  # 0
        [2, 0, 2, 4, 6, 4, 1, 2, 6, 8, 4, 1, 2, 6, 8, 6, 4, 6, 4, 5, 6, 4, 7, 4, 5],  # 1
        [4, 2, 0, 1, 2, 12, 4, 2, 2, 3, 12, 4, 2, 2, 3, 16, 12, 8, 6, 8, 16, 12, 8, 6, 8],  # 2
        [6, 4, 1, 0, 1, 16, 6, 4, 1, 2, 16, 6, 4, 1, 2, 20, 16, 12, 4, 6, 20, 16, 12, 4, 6],  # 3
        [8, 6, 2, 1, 0, 20, 8, 6, 2, 1, 20, 8, 6, 2, 1, 24, 20, 16, 6, 4, 24, 20, 16, 6, 4],  # 4
        [1, 4, 12, 16, 20, 0, 2, 4, 12, 16, 0, 2, 4, 12, 16, 1, 2, 3, 8, 10, 1, 2, 3, 8, 10],  # 5
        [4, 1, 4, 6, 8, 2, 0, 1, 4, 6, 2, 0, 1, 4, 6, 4, 2, 4, 3, 4, 4, 2, 4, 3, 4],  # 6
        [6, 2, 2, 4, 6, 4, 1, 0, 2, 4, 4, 1, 0, 2, 4, 6, 4, 2, 2, 3, 6, 4, 2, 2, 3],  # 7
        [16, 6, 2, 1, 2, 12, 4, 2, 0, 1, 12, 4, 2, 0, 1, 16, 12, 8, 2, 4, 16, 12, 8, 2, 4],  # 8
        [20, 8, 3, 2, 1, 16, 6, 4, 1, 0, 16, 6, 4, 1, 0, 20, 16, 12, 4, 2, 20, 16, 12, 4, 2],  # 9
        [1, 4, 12, 16, 20, 0, 2, 4, 12, 16, 0, 2, 4, 12, 16, 1, 2, 3, 8, 10, 1, 2, 3, 8, 10],  # 10
        [4, 1, 4, 6, 8, 2, 0, 1, 4, 6, 2, 0, 1, 4, 6, 4, 2, 4, 3, 4, 4, 2, 4, 3, 4],  # 11
        [6, 2, 2, 4, 6, 4, 1, 0, 2, 4, 4, 1, 0, 2, 4, 6, 4, 2, 2, 3, 6, 4, 2, 2, 3],  # 12
        [16, 6, 2, 1, 2, 12, 4, 2, 0, 1, 12, 4, 2, 0, 1, 16, 12, 8, 2, 4, 16, 12, 8, 2, 4],  # 13
        [20, 8, 3, 2, 1, 16, 6, 4, 1, 0, 16, 6, 4, 1, 0, 20, 16, 12, 4, 2, 20, 16, 12, 4, 2],  # 14
        [2, 6, 16, 20, 24, 1, 4, 6, 16, 20, 1, 4, 6, 16, 20, 0, 1, 2, 6, 8, 0, 1, 2, 6, 8],  # 15
        [3, 4, 12, 16, 20, 2, 2, 4, 12, 16, 2, 2, 4, 12, 16, 1, 0, 1, 4, 6, 1, 0, 1, 4, 6],  # 16
        [4, 6, 8, 12, 16, 3, 4, 2, 8, 12, 3, 4, 2, 8, 12, 2, 1, 0, 2, 4, 2, 1, 0, 2, 4],  # 17
        [10, 4, 6, 4, 6, 8, 3, 2, 2, 4, 8, 3, 2, 2, 4, 6, 4, 2, 0, 1, 6, 4, 2, 0, 1],  # 18
        [12, 5, 8, 6, 4, 10, 4, 3, 4, 2, 10, 4, 3, 4, 2, 8, 6, 4, 1, 0, 8, 6, 4, 1, 0],  # 19
        [2, 6, 16, 20, 24, 1, 4, 6, 16, 20, 1, 4, 6, 16, 20, 0, 1, 2, 6, 8, 0, 1, 2, 6, 8],  # 20
        [3, 4, 12, 16, 20, 2, 2, 4, 12, 16, 2, 2, 4, 12, 16, 1, 0, 1, 4, 6, 1, 0, 1, 4, 6],  # 21
        [4, 7, 8, 12, 16, 3, 4, 2, 4, 12, 3, 4, 2, 8, 12, 2, 1, 0, 2, 4, 2, 1, 0, 2, 4],  # 22
        [10, 4, 6, 4, 6, 8, 3, 2, 2, 4, 8, 3, 2, 2, 4, 6, 4, 2, 0, 1, 6, 4, 2, 0, 1],  # 23
        [12, 5, 8, 6, 4, 10, 4, 3, 4, 2, 10, 4, 3, 4, 2, 8, 6, 4, 1, 0, 8, 6, 4, 1, 0]]).astype(np.float)  # 24
CLASSIFIER_RISK_NUMBER_SUBREGIONS_PER_REGION = 5
RISK_ZONE_SCORE_HIGH = 1
RISK_ZONE_SCORE_MEDIUM = 0.75
RISK_ZONE_SCORE_LOW = 0.3
RISK_OBJECT_SCORE_CAR = 1
RISK_OBJECT_SCORE_BUS = 1
RISK_OBJECT_SCORE_MOTORBIKE = 1
RISK_OBJECT_SCORE_BICYCLE = 0.8
RISK_OBJECT_SCORE_PERSON = 0.6
RISK_SUBREGIONS_SCORES = np.array([0.6, 0.7, 0.8, 0.9, 1.0])
OBJECT_MINIMUM_HEIGHT_IN_PROJECTION_PERCENTAGE = 0.2
OBJECT_MINIMUM_HEIGHT_IN_PROJECTION_THRESHOLD = 10
